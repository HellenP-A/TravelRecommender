# Contenido actualizado de app.py
import streamlit as st
import pandas as pd
from motor_inferencia import MotorInferencia
from base_conocimiento import BaseConocimiento
from base_hechos import BaseHechos

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Recomendador de Destinos Tur√≠sticos",
    page_icon="‚úàÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.streamlit.io',
        'Report a Bug': 'https://github.com/streamlit/streamlit/issues',
        'About': 'Sistema de recomendaci√≥n de destinos tur√≠sticos basado en conocimientos - Universidad CENFOTEC'
    }
)

# Cargar dataset
travel_data = pd.read_csv("cleaned_travel_dataset.csv")

# Inicializar sistema
base_conocimiento = BaseConocimiento(travel_data)
base_hechos = BaseHechos()
motor = MotorInferencia(base_conocimiento, base_hechos)

# Barra lateral
st.sidebar.header("üìã Acerca del Proyecto")
st.sidebar.markdown("""
Este proyecto desarrolla un Sistema Basado en Conocimientos (KBS) para la planificaci√≥n de vacaciones, abordando las problem√°ticas de la falta de informaci√≥n consolidada, la b√∫squeda manual ineficiente y la escasa personalizaci√≥n en las recomendaciones de viaje.  
Utilizamos el dataset *Travel Details* de Kaggle para ofrecer recomendaciones optimizadas seg√∫n presupuesto, duraci√≥n y preferencias de hospedaje.
""")

st.sidebar.markdown("### üõ†Ô∏è Detalles del Desarrollo")
st.sidebar.markdown("""
- **Problem√°tica:** Falta de informaci√≥n consolidada, necesidad de comparar hospedaje y transporte, b√∫squeda manual ineficiente, y escasa personalizaci√≥n.  
- **Requerimientos:**  
  - Interfaz de usuario interactiva para ingreso de datos.  
  - Base de Conocimientos con reglas sobre destinos, costos y condiciones.  
  - Base de Hechos para almacenar datos del usuario.  
  - Motor de Inferencia con similitud de coseno y reglas de filtrado.  
  - Uso exclusivo de datos de Kaggle, sin APIs externas.  
- **Arquitectura:**  
  - Frontend: Interfaz web con Streamlit (adaptada desde un CLI inicial).  
  - Backend: Python con Pandas para manipulaci√≥n de datos.  
  - Base de Conocimientos: Estructurada en CSV (adaptada desde OWL/RDF).  
  - Base de Hechos: Almacenamiento en memoria (adaptada desde MongoDB/PostgreSQL).  
  - Motor de Inferencia: Implementado con reglas personalizadas (adaptado desde PyKE/RDFLib).  
""")

st.sidebar.markdown("### üìö Lecciones Aprendidas")
st.sidebar.markdown("""
- **Preprocesamiento:** La limpieza del dataset fue clave para garantizar recomendaciones precisas.  
- **Similitud de coseno:** Efectiva para recomendaciones flexibles, evitando filtros estrictos.  
- **Reglas:** La combinaci√≥n de umbrales y preferencias mejora la personalizaci√≥n.  
- **Interfaz:** Streamlit permiti√≥ un desarrollo r√°pido y una experiencia de usuario intuitiva.  
- **Limitaciones:** La falta de datos din√°micos (como clima o popularidad) podr√≠a enriquecer las recomendaciones.
""")

st.sidebar.markdown("---")  # L√≠nea divisoria para mejor separaci√≥n visual
st.sidebar.markdown("Desarrollado para el curso de **Sistemas Basados en Conocimientos** de la **Universidad CENFOTEC**.")
st.sidebar.markdown("**Profesor:** Luis Gerardo Le√≥n Vega")
st.sidebar.markdown("### üë• Autores")
st.sidebar.markdown("""
<div style='background-color: #1E1E1E; padding: 10px; border-radius: 5px;'>
  <p style='margin: 5px 0; color: #FAFAFA;'><span style='color: #FF4B4B;'>üë§</span> Hellen Aguilar Noguera</p>
  <p style='margin: 5px 0; color: #FAFAFA;'><span style='color: #FF4B4B;'>üë§</span> Jos√© Leonardo Araya Parajeles</p>
  <p style='margin: 5px 0; color: #FAFAFA;'><span style='color: #FF4B4B;'>üë§</span> Fernando Rojas Mel√©ndez</p>
  <p style='margin: 5px 0; color: #FAFAFA;'><span style='color: #FF4B4B;'>üë§</span> Alejandro Villalobos Hern√°ndez</p>
</div>
""", unsafe_allow_html=True)

# Encabezado personalizado (sin redundancia)
st.markdown("""
# Sistema de Recomendaci√≥n de Destinos Tur√≠sticos
""")

# Mostrar la imagen (si ya la tienes integrada)
# try:
#     st.image("travel_illustration.jpg", use_column_width=True)
# except FileNotFoundError:
#     st.warning("La imagen 'travel_illustration.jpg' no se encontr√≥. Aseg√∫rate de cargarla en el contenedor.")

# Estilo visual personalizado (tema oscuro)
st.markdown("""
<style>
.stApp {
    background-color: #0E1117;  /* Fondo oscuro */
}
h1 {
    color: #FF4B4B;  /* T√≠tulo en rojo claro */
}
h2, h3 {
    color: #FAFAFA;  /* Subt√≠tulos en blanco */
}
.stButton>button {
    background-color: #FF4B4B;  /* Bot√≥n en rojo claro */
    color: white;  /* Texto del bot√≥n en blanco */
}
.stButton>button:hover {
    background-color: #E43A3A;  /* Color del bot√≥n al pasar el mouse */
}
.stSidebar .sidebar-content {
    background-color: #262730;  /* Fondo de la barra lateral */
}
</style>
""", unsafe_allow_html=True)

# Contenido principal
st.title("‚úàÔ∏è Recomendador de Destinos Tur√≠sticos")
st.write("Utilice el formulario a continuaci√≥n para obtener recomendaciones personalizadas de destinos tur√≠sticos.")

# Formulario para ingresar datos
st.header("Ingrese sus Preferencias de Viaje")

with st.form("travel_form"):
    # Subsecci√≥n: Presupuesto
    st.subheader("üí∞ Presupuesto")
    presupuesto = st.number_input(
        "Presupuesto (USD)",
        min_value=100.0,
        step=50.0,
        value=1000.0,
        help="Ingrese su presupuesto m√°ximo en d√≥lares para el viaje."
    )

    # Subsecci√≥n: Duraci√≥n del Viaje
    st.subheader("‚è≥ Duraci√≥n del Viaje")
    col_dur1, col_dur2 = st.columns(2)
    with col_dur1:
        duracion_min = st.number_input(
            "Duraci√≥n m√≠nima (d√≠as)",
            min_value=1,
            step=1,
            value=3,
            help="N√∫mero m√≠nimo de d√≠as que planea viajar."
        )
    with col_dur2:
        duracion_max = st.number_input(
            "Duraci√≥n m√°xima (d√≠as)",
            min_value=1,
            step=1,
            value=7,
            help="N√∫mero m√°ximo de d√≠as que planea viajar."
        )

    # Subsecci√≥n: Fecha del Viaje
    st.subheader("üìÖ Fecha del Viaje")
    mes = st.slider(
        "Mes de viaje",
        1, 12, 6,
        help="Seleccione el mes en el que desea viajar (1: Enero, 12: Diciembre)."
    )

    # Subsecci√≥n: Preferencias de Hospedaje
    st.subheader("üè® Preferencias de Hospedaje")
    tipo_hospedaje = st.selectbox(
        "Tipo de hospedaje",
        ["", "Hotel", "Resort", "Villa", "Airbnb"],
        index=0,
        help="Seleccione el tipo de hospedaje que prefiere. Deje en blanco para no filtrar por este criterio."
    )

    # Bot√≥n para realizar la b√∫squeda
    submitted = st.form_submit_button("Buscar Destinos")

if submitted:
    # Ingresar datos del usuario en la BaseHechos
    base_hechos.ingresar_datos_usuario(presupuesto, duracion_min, duracion_max, mes, tipo_hospedaje)
    
    # Generar recomendaciones
    recomendaciones = motor.generar_recomendaciones()

    # Mostrar el resultado
    st.subheader("Resultado de las Recomendaciones")

    if not recomendaciones.empty:
        st.success("üéØ **Recomendaciones encontradas:**")
        st.dataframe(recomendaciones.style.format({"Total cost": "${:.2f}", "Similarity": "{:.4f}"}))
    else:
        st.warning("üòï **No se encontraron coincidencias con tus criterios.** Intenta ajustar tus preferencias.")

# Pie de p√°gina
st.markdown("""
---
**¬© 2025 Hellen Aguilar Noguera, Jos√© Leonardo Araya Parajeles, Fernando Rojas Mel√©ndez, Alejandro Villalobos Hern√°ndez**  
Desarrollado para el curso de Sistemas Basados en Conocimientos, Universidad CENFOTEC.
""", unsafe_allow_html=True)